[
  
  {
    "title"    : "Working with multiple AWS accounts on the command line",
    "category" : "",
    "tags"     : " aws, command line, cloud, security",
    "url"      : "/blog/2020/06/20/aws-cmdline.html",
    "date"     : "June 20, 2020",
    "excerpt"  : "\nIt is good practice to organise AWS workloads in multiple accounts, be it for security, accounting or just to maintain your sanity. Here is how I work with multiple accounts in my AWS Organization from the command line.\n\n\naccount(s)\n\n\nWhy does AW...",
  "content"  : "\nIt is good practice to organise AWS workloads in multiple accounts, be it for security, accounting or just to maintain your sanity. Here is how I work with multiple accounts in my AWS Organization from the command line.\n\n\naccount(s)\n\n\nWhy does AWS encourage multiple accounts setups (apart from getting customers further entrenched on the platform)? This video(3:20-7:00) gives a good explanation.\n\n\nAs for me, I&amp;#8217;m organising my demos and PoCs in a separate Demo account. This way, I can share admin access to my demos with my colleagues without exposing my main account. In addition, I&amp;#8217;m also centralising my all IAM users in my main account, and access my Demo (and other accounts) by switching (assuming) roles. For readers new to this setup, I suggest this tutorial.\n\n\nIn my Demo account, I create DemoAdminRole and DemoPowerUserRole roles, with the following trust policy to allow users from my main account to assume these roles:\n\n\n\n{\n  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,\n  &amp;quot;Statement&amp;quot;: [\n    {\n      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,\n      &amp;quot;Principal&amp;quot;: {\n        &amp;quot;AWS&amp;quot;: &amp;quot;arn:aws:iam::&amp;lt;MAIN_ACCOUNT_NUM&amp;gt;:root&amp;quot;\n      },\n      &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot;\n    }\n  ]\n}\n\n\n\nIn my main account, I created proxy roles that do not have any other permission other then to assume roles in my Demo account with policy that looks like this:\n\n\n\n{\n    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,\n    &amp;quot;Statement&amp;quot;: {\n        &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,\n        &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot;,\n        &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:iam::&amp;lt;DEMO_ACCOUNT_NUM&amp;gt;:role/&amp;lt;DEMO_ROLE_NAME&amp;gt;&amp;quot;\n    }\n}\n\n\n\nFinally, to prevent creation of users and access keys in the Demo account, I attached a service control policy like so to my Demo account:\n\n\n\n{\n    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,\n    &amp;quot;Statement&amp;quot;: [\n        {\n            &amp;quot;Sid&amp;quot;: &amp;quot;Statement1&amp;quot;,\n            &amp;quot;Effect&amp;quot;: &amp;quot;Deny&amp;quot;,\n            &amp;quot;Action&amp;quot;: [\n                &amp;quot;iam:CreateUser&amp;quot;,\n                &amp;quot;iam:CreateAccessKey&amp;quot;\n            ],\n            &amp;quot;Resource&amp;quot;: [\n                &amp;quot;*&amp;quot;\n            ]\n        }\n    ]\n}\n\n\n\n\n\nprofiles, profiles\n\n\nAWS CLI and SDKs make use of ~/.aws/config and ~/.aws/credentials to manage AWS profiles and credentials. My ~/.aws/config file looks like this:\n\n\n\n[profile demo]\nregion=ap-southeast-1\nrole_arn=arn:aws:iam::&amp;lt;DEMO_ACCT_NUM&amp;gt;:role/&amp;lt;DEMO_ROLE_NAME&amp;gt;\nsource_profile=demo\n\n[profile main]\nregion=us-west-2\noutput=json\n\n\n\nand ~/.aws/credentials looks like this:\n\n\n\n[demo]\naws_access_key_id     = &amp;lt;DEMO_PROXY_USER_ACCESS_KEY&amp;gt;\naws_secret_access_key = &amp;lt;DEMO_PROXY_USER_SECRET_KEY&amp;gt;\n\n[main]\naws_access_key_id     = &amp;lt;MAIN_ACCESS_KEY&amp;gt;\naws_secret_access_key = &amp;lt;MAIN_SECRET_KEY&amp;gt;\n\n\n\n\n\nswitching between profiles\n\n\nI deliberately not have a default profile to reduce the chance of targeting my scripts and ansible playbooks with the wrong profile. Instead, I added the following.[1] to my .zshrc (and .bashrc) to allow me to quickly switch between profiles:\n\n\n\n# working with AWS profiles\nfunction _aws_list_all {\n    credentialFileLocation=${AWS_SHARED_CREDENTIALS_FILE};\n    if [ -z $credentialFileLocation ]; then\n        credentialFileLocation=~/.aws/credentials\n    fi\n\n    while read line; do\n        if [[ $line == &amp;quot;[&amp;quot;* ]]; then echo &amp;quot;$line&amp;quot;; fi;\n    done &amp;lt; $credentialFileLocation;\n};\n\nfunction _aws_switch_profile() {\n   if [ -z $1 ]; then  echo &amp;quot;Usage: aws-profile profilename&amp;quot;; return; fi\n\n   exists=&amp;quot;$(aws configure get aws_access_key_id --profile $1)&amp;quot;\n   if [[ -n $exists ]]; then\n       export AWS_DEFAULT_PROFILE=$1;\n       export AWS_PROFILE=$1;\n       export AWS_REGION=$(aws configure get region --profile $1);\n       echo &amp;quot;Switched to AWS Profile: $1&amp;quot;;\n       aws configure list\n   fi\n};\n\nalias aws-all=&amp;quot;_aws_list_all&amp;quot;\nalias aws-profile=&amp;quot;_aws_switch_profile&amp;quot;\nalias aws-whoami=&amp;quot;aws configure list&amp;quot;\n\n\n\n&amp;#160;\nI can then switch profiles using the 3 aliases like so:\n\n\n\n\n\n\n\n\n\n\n\n1. I got this off the Internet a while back, but can no longer find the source to give proper credit\n\n"
} ,
  
  {
    "title"    : "On zsh, prezto and nerd fonts...",
    "category" : "",
    "tags"     : " terminal, zsh, prezto, iterm2, command line",
    "url"      : "/blog/2020/06/10/my-terminal-setup.html",
    "date"     : "June 10, 2020",
    "excerpt"  : "\nYay! So I switched job and got a new MacBook Pro. Good excuse to refresh my development (and terminal) setup. I have been using bash along with completion and git-prompt for as long as I can remember, this time I decided to cast my net wider and ...",
  "content"  : "\nYay! So I switched job and got a new MacBook Pro. Good excuse to refresh my development (and terminal) setup. I have been using bash along with completion and git-prompt for as long as I can remember, this time I decided to cast my net wider and see what that world has been up to since I last spend time on this.\n\n\nzsh, prezto\n\n\nI&amp;#8217;m sticking to iTerm2 as my preferred terminal application. As for the shell, I decided to take a look at zsh, seeing that it&amp;#8217;s now the default shell with MacOS Catalina. I also wanted capabilities such as auto-completion, git integration - without a lot of effort ;-). After a bit of googling and reading, I picked prezto as my zsh configuration framework.\n\n\n\n\ninstalling the tools\n\n\nInstalling iterm2 is simple with homebrew:\n\n\n\nbrew cask install iterm2\n\n\n\nZsh that comes with MacOS Catalina is quite current (v5.7.1), so I&amp;#8217;ll just use the OS supplied version.\n\n\nNext, install prezto with the following commands:\n\n\n\ngit clone --recursive https://github.com/sorin-ionescu/prezto.git &amp;quot;${ZDOTDIR:-$HOME}/.zprezto&amp;quot;\n\n\n\nAlternatively, you can install from my fork which contains my modified theme:\n\n\n\ngit clone --recursive https://github.com/naikoob/prezto.git &amp;quot;${ZDOTDIR:-$HOME}/.zprezto&amp;quot;\n\n\n\nfollowed by\n\n\n\nsetopt EXTENDED_GLOB\nfor rcfile in &amp;quot;${ZDOTDIR:-$HOME}&amp;quot;/.zprezto/runcoms/^README.md(.N); do\n  ln -s &amp;quot;$rcfile&amp;quot; &amp;quot;${ZDOTDIR:-$HOME}/.${rcfile:t}&amp;quot;\ndone\n\n\n\n\n\ntinkering\n\n\nFirst, edit the modules section of ~/.zpreztorc to enable the desired modules. I&amp;#8217;ve added a couple of modules as highlighted below:\n\n\n\n# Set the Prezto modules to load (browse modules).\n# The order matters.\nzstyle &#39;:prezto:load&#39; pmodule \\\n  &#39;environment&#39; \\\n  &#39;terminal&#39; \\\n  &#39;editor&#39; \\\n  &#39;history&#39; \\\n  &#39;directory&#39; \\\n  &#39;spectrum&#39; \\\n  &#39;utility&#39; \\\n  &#39;ssh&#39; \\ (1)\n  &#39;completion&#39; \\\n  &#39;git&#39; \\ (2)\n  &#39;syntax-highlighting&#39; \\ (3)\n  &#39;history-substring-search&#39; \\ (4)\n  &#39;prompt&#39;\n\n\n\n\n\n1\nuseful if you have passphrase protected your keys and/or often ssh over a bastion hosts\n\n\n2\nshows git information on your prompt\n\n\n3\neh&amp;#8230;&amp;#8203; syntax highlighting? Well, actually this also does syntax checking as you type\n\n\n4\nenable searching through command history using ctrl-r\n\n\n\n\n\n\nthemes\n\n\nTbh, this is a key motivation for me to explore prezto&amp;#8230;&amp;#8203; The fancy prompt don&amp;#8217;t make me a better developer, but it sure makes me look the part ;-)\n\n\nThis is how my prompt looks like:\n\n\n\n\n\n\n\nIt&amp;#8217;s based on the paradox theme that comes with the prezto distribution, and available on my fork here\n\n\nTo use this theme, copy it to ~/zprezto/modules/prompt/functions/prompt_doxxed_setup, and edit ~/.zpreztorc like so:\n\n\n\n# Set the prompt theme to load.\n# Setting it to &#39;random&#39; loads a random theme.\n# Auto set to &#39;off&#39; on dumb terminals.\nzstyle &#39;:prezto:module:prompt&#39; theme &#39;doxxed&#39;\n\n\n\n\n\nnerd fonts and glyphs\n\n\nNotice the branch and chevron symbols in the screenshot above? Those are not in the standard character set, we need a patched/nerd font so that they display properly. You can find patched fonts here or  here. I use the MesloLGS font from here. Just download and install the .ttf files.\n\n\nIf you&amp;#8217;re only using zsh from iTerm2 exclusively, you can skip the fonts and just enable built-in Powerline glyphs in iTerm2, like so:\n\n\n\n\n\n\n\nAnd while you&amp;#8217;re at it, you can change the colour presets as well. I&amp;#8217;m using &#39;Tango Dark&#39; for the screenshot above.\n\n\n\n\n\n\n\nI use iTerm2&amp;#8217;s built-in glyphs in iTerm2 as I feel they render better, and patched/nerd font in Visual Studio Code terminals. Overall, I&amp;#8217;m pretty satisfied with this setup. Hope you find it useful too.\n\n\n&amp;#160;\n\n\n"
} 
  
  
  
]
