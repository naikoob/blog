[
  
  {
    "title"    : "{AWS} infrastructure as {Ansible} code",
    "category" : "",
    "tags"     : " ansible, aws",
    "url"      : "/blog/2020/07/03/ansible-aws-vpc.html",
    "date"     : "July 3, 2020",
    "excerpt"  : "\nI need to stand up (and tear down) AWS VPCs to try a few OpenShift installation scenarios. I also wanted a revision on Ansible. So I built a VPC with Ansible.\n\n\ntl;dr\n\n\n\n\nClone/download from https://github.com/naikoob/ansible-aws-vpc.git\n\n\nEdit &amp;...",
  "content"  : "\nI need to stand up (and tear down) AWS VPCs to try a few OpenShift installation scenarios. I also wanted a revision on Ansible. So I built a VPC with Ansible.\n\n\ntl;dr\n\n\n\n\nClone/download from https://github.com/naikoob/ansible-aws-vpc.git\n\n\nEdit &amp;lt;repo_root&amp;gt;/inventory/group_vars/aws_infra.yml with AWS account and profile information\n\n\nProvision/unprovision with:\n\n\n\n\n# provision\nansible-playbook -i inventory/base_infra provision_infra.yml\n\n# unprovision\nansible-playbook -i inventory/base_infra provision_infra.yml -e infra_state=absent\n\n\n\n\n\n\nwhen in doubt, check out the README and the comments in the playbooks.\n\n\n\n\n\n\nwhy? what?\n\n\nThis is my seed project for the demos and PoCs I deploy on AWS. I like to automate the provisioning (and unprovisioning) so that I can get the demos/PoCs up and running quickily, but don&amp;#8217;t incur unnecessary costs when not in use.\n\n\nIMHO, if RTO allows, infrastructure as code is the most cost effective disaster recovery mechanism, and any non-trivial IT infrastructure should be deployed in this way.\n\n\nHere&amp;#8217;s what my playbook provisions:\n\n\n\n\nA VPC\n\n\nRoute 53 private hosted zone associated with the VPC\n\n\n3 public subnets across 3 AZs\n\n\n3 private subnets across 3 AZs\n\n\nInternet Gateway and associated route table\n\n\nNAT Gateway and associated route table\n\n\n\n\n\n\nansible . aws . boto\n\n\nAnsible is available on most Linux distributions, so you can install it with apt/dnf/yum/pacman etc. On the Mac, the recommended installation is via Python&amp;#8217;s package manager pip, but I use Homebrew:\n\n\n\nbrew install ansible\n\n\n\nThis should install Ansible and it&amp;#8217;s dependencies, including Python.\n\n\nOne of the strength of Ansible is the extensive collection of modules, including a comprehensive list of AWS modules. Most (all?) Ansible modules for AWS uses the AWS&amp;#8217;s boto3/boto SDK. So we install them with Python&amp;#8217;s package manager pip:\n\n\n\npip install boto3\n\n\n\nFinally, you should have your AWS profiles and credentials configured (~/.aws/config and ~/.aws/credentials) for your account.\n\n\n\n\nansible files\n\n\nNow, clone/download my repository - https://github.com/naikoob/ansible-aws-vpc.git\n\n\naccount variables\n\nI&amp;#8217;ve chosen to embed account and profile information (note: not keys!) in vars files instead of environment variables to minimize the chance of running the playbooks against the wrong account.\n\n\nUpdate /inventory/group_vars/aws_infra.yml with AWS account and profile information:\n\n\n\n# group_vars/aws_infra.yml\n# ---\n# specify infrastructure details and AWS credentials\n\n# aws account, role, profile and region\naws_account: &quot;&amp;lt;AWS_ACCOUNT_NUMBER&amp;gt;&quot;\naws_role: &quot;&amp;lt;AWS_ROLE&amp;gt;&quot;\naws_profile: &quot;&amp;lt;AWS_PROFILE&amp;gt;&quot;                # assumed profile used for provisioning\naws_source_profile: &quot;&amp;lt;AWS_SOURCE_PROFILE&amp;gt;&quot;  # profile used to assume role\naws_region: &quot;&amp;lt;AWS_REGION&amp;gt;&quot;\n\n# truncated ...\n\n\n\nNotice the aws_source_profile variable. This is because I&amp;#8217;ve centralized my IAM users in my main account, and use role switching to access the other accounts (as mentioned in my earlier post).\n\n\nFor example, if my profile is defined as such in ~/.aws/config:\n\n\n\n[profile demo]\nregion=ap-southeast-1\nrole_arn=arn:aws:iam::112233445566:role/DemoAdminRole\nsource_profile=main\n\n\n\nthen the variables should be:\n\n\n\naws_account: &quot;112233445566&quot;\naws_role: &quot;DemoAdminRole&quot;\naws_profile: &quot;demo&quot;                # assumed profile used for provisioning\naws_source_profile: &quot;main&quot;         # profile used to assume role\n\n\n\n\nvpc variables\n\nNext, review and customize the VPC configuration in inventory/host_vars/demo_vpc.yml if necessary.\n\n\n\n# host_vars/vpc.yml\n\n# general details\nvpc_name: demo.vpc\nvpc_dns_zone: demo.example.com.private\n\n# CIDR block\nvpc_cidr_block: 10.0.0.0/16\n\n# Private subnets\nvpc_private_subnets:\n  - { cidr: &quot;10.0.21.0/24&quot;, az: &quot;{{ aws_region }}a&quot; }\n  - { cidr: &quot;10.0.22.0/24&quot;, az: &quot;{{ aws_region }}b&quot; }\n  - { cidr: &quot;10.0.23.0/24&quot;, az: &quot;{{ aws_region }}c&quot; }\n\nvpc_public_subnets:\n  - { cidr: &quot;10.0.201.0/24&quot;, az: &quot;{{ aws_region }}a&quot; }\n  - { cidr: &quot;10.0.202.0/24&quot;, az: &quot;{{ aws_region }}b&quot; }\n  - { cidr: &quot;10.0.203.0/24&quot;, az: &quot;{{ aws_region }}c&quot; }\n\n\n\n\nplaybooks\n\nI&amp;#8217;ve implemented 2 playbooks as follows:\n\n\n\n\nprovision_infra.yml\n\n\n\nThis playbook provision/unprovision the VPC and associated resources (set variable infra_state=absent to unprovision).\n\n\nTo provision:\n\n\n\nansible-playbook -i inventory/base_infra provision_infra.yml\n\n\n\nTo unprovision:\n\n\n\nansible-playbook -i inventory/base_infra provision_infra.yml -e infra_state=absent\n\n\n\n\n\n\ndelete_nat_gateway.yml\n\n\n\nThis playbook deletes the NAT gateway and releases the associated EIP when not in use (to save $$). To re-create the NAT gateway, just re-run the base_infra.yml playbook. Note that this playbook looks for the var file out/nat_gateway_id.var that is created during VPC provisioning to know which NAT gateway should be deleted. If you&amp;#8217;re deleting NAT gateway from a different machine/directory, you should set the nat_gateway_id variable in a different manner, say on the command line (-e), like so:\n\n\n\nansible-playbook -i inventory/base_infra delete_nat_gateway.yml -e nat_gateway_id=&amp;lt;NAT_GATEWAY_ID&amp;gt;\n\n\n\n\n\n\n\n\n\n\n\nI can, should I?\n\n\nIf you look into the list of tasks, you&amp;#8217;ll see that using Ansible to provision infrastructure of AWS is pretty fine grained. You provision the individual components that make up your VPC [1]. To me, this is a good thing, as I like to understand what&amp;#8217;s going on under the covers. For others, you may look at IoC tools such as Terraform, and drive the automation with Ansible Terraform module. Maybe I&amp;#8217;ll write about this in a future post ;-).\n\n\n\n\n\n\n1. There used to be an ec2_var module in Ansible, but it&amp;#8217;s deprecated and removed since version 2.5\n\n"
} ,
  
  {
    "title"    : "Working with multiple AWS accounts on the command line",
    "category" : "",
    "tags"     : " aws, command line, cloud, security",
    "url"      : "/blog/2020/06/20/aws-cmdline.html",
    "date"     : "June 20, 2020",
    "excerpt"  : "\nIt is a good practice to organise AWS workloads in multiple accounts, be it for security, accounting, or just to maintain our sanity. Here is how I work with multiple accounts in my AWS Organization from the command line.\n\n\naccount(s)\n\n\nWhy does ...",
  "content"  : "\nIt is a good practice to organise AWS workloads in multiple accounts, be it for security, accounting, or just to maintain our sanity. Here is how I work with multiple accounts in my AWS Organization from the command line.\n\n\naccount(s)\n\n\nWhy does AWS encourage multiple accounts setups (apart from getting customers further entrenched on the platform)? This video(3:20-7:00) gives a good explanation.\n\n\nAs for me, I&amp;#8217;m organising my demos and PoCs in a separate Demo account. This way, I can share admin access to my demos with my colleagues without exposing my main account. In addition, I&amp;#8217;m also centralising all IAM users in my main account, and access my Demo (and other accounts) by switching (assuming) roles. For readers new to this setup, I suggest this tutorial.\n\n\nIn my Demo account, I create DemoAdminRole role, with the following trust policy to allow users from my main account to assume this roles:\n\n\n\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Principal&quot;: {\n        &quot;AWS&quot;: &quot;arn:aws:iam::&amp;lt;MAIN_ACCOUNT_NUM&amp;gt;:root&quot;\n      },\n      &quot;Action&quot;: &quot;sts:AssumeRole&quot;\n    }\n  ]\n}\n\n\n\nIn my main account, I created proxy roles that do not have any permission, other then to assume roles in my Demo account, with policy that looks like this:\n\n\n\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: {\n        &quot;Effect&quot;: &quot;Allow&quot;,\n        &quot;Action&quot;: &quot;sts:AssumeRole&quot;,\n        &quot;Resource&quot;: &quot;arn:aws:iam::&amp;lt;DEMO_ACCOUNT_NUM&amp;gt;:role/&amp;lt;DEMO_ROLE_NAME&amp;gt;&quot;\n    }\n}\n\n\n\nI can then attach this role to users that I want to grant access to my Demo account.\n\n\nFinally, to prevent creation of users and access keys in the Demo account, I attached a service control policy like so to my Demo account:\n\n\n\n{\n    &quot;Version&quot;: &quot;2012-10-17&quot;,\n    &quot;Statement&quot;: [\n        {\n            &quot;Sid&quot;: &quot;Statement1&quot;,\n            &quot;Effect&quot;: &quot;Deny&quot;,\n            &quot;Action&quot;: [\n                &quot;iam:CreateUser&quot;,\n                &quot;iam:CreateAccessKey&quot;\n            ],\n            &quot;Resource&quot;: [\n                &quot;*&quot;\n            ]\n        }\n    ]\n}\n\n\n\n\n\nprofiles, profiles\n\n\nAWS CLI and SDKs make use of ~/.aws/config and ~/.aws/credentials to manage AWS profiles and credentials. My ~/.aws/config file looks like this:\n\n\n\n[profile demo]\nregion=ap-southeast-1\nrole_arn=arn:aws:iam::&amp;lt;DEMO_ACCT_NUM&amp;gt;:role/&amp;lt;DEMO_ROLE_NAME&amp;gt;\nsource_profile=demo\n\n[profile main]\nregion=us-west-2\noutput=json\n\n\n\nand ~/.aws/credentials looks like this:\n\n\n\n[demo]\naws_access_key_id     = &amp;lt;DEMO_PROXY_USER_ACCESS_KEY&amp;gt;\naws_secret_access_key = &amp;lt;DEMO_PROXY_USER_SECRET_KEY&amp;gt;\n\n[main]\naws_access_key_id     = &amp;lt;MAIN_ACCESS_KEY&amp;gt;\naws_secret_access_key = &amp;lt;MAIN_SECRET_KEY&amp;gt;\n\n\n\n\n\nswitching between profiles\n\n\nI deliberately not have a default profile to reduce the chance of targeting my scripts and ansible playbooks at the wrong profile. Instead, I added the following.[1] to my .zshrc (and .bashrc) to allow me to quickly switch between profiles:\n\n\n\n# working with AWS profiles\nfunction _aws_list_all {\n    credentialFileLocation=${AWS_SHARED_CREDENTIALS_FILE};\n    if [ -z $credentialFileLocation ]; then\n        credentialFileLocation=~/.aws/credentials\n    fi\n\n    while read line; do\n        if [[ $line == &quot;[&quot;* ]]; then echo &quot;$line&quot;; fi;\n    done &amp;lt; $credentialFileLocation;\n};\n\nfunction _aws_switch_profile() {\n   if [ -z $1 ]; then  echo &quot;Usage: aws-profile profilename&quot;; return; fi\n\n   exists=&quot;$(aws configure get aws_access_key_id --profile $1)&quot;\n   if [[ -n $exists ]]; then\n       export AWS_DEFAULT_PROFILE=$1;\n       export AWS_PROFILE=$1;\n       export AWS_REGION=$(aws configure get region --profile $1);\n       echo &quot;Switched to AWS Profile: $1&quot;;\n       aws configure list\n   fi\n};\n\nalias aws-all=&quot;_aws_list_all&quot;\nalias aws-profile=&quot;_aws_switch_profile&quot;\nalias aws-whoami=&quot;aws configure list&quot;\n\n\n\n&amp;#160;\nI can then switch profiles using the 3 aliases like so:\n\n\n\n\n\n\n\n\n\n\n\n1. I got this off the Internet a while back, but can no longer find the source to give proper credit\n\n"
} ,
  
  {
    "title"    : "On zsh, prezto and nerd fonts...",
    "category" : "",
    "tags"     : " terminal, zsh, prezto, iterm2, command line",
    "url"      : "/blog/2020/06/10/my-terminal-setup.html",
    "date"     : "June 10, 2020",
    "excerpt"  : "\nYay! So I switched job and got a new MacBook Pro. Good excuse to refresh my development (and terminal) setup. I have been using bash along with completion and git-prompt for as long as I can remember, this time I decided to cast my net wider and ...",
  "content"  : "\nYay! So I switched job and got a new MacBook Pro. Good excuse to refresh my development (and terminal) setup. I have been using bash along with completion and git-prompt for as long as I can remember, this time I decided to cast my net wider and see what that world has been up to since I last spend time on this.\n\n\nzsh, prezto\n\n\nI&amp;#8217;m sticking to iTerm2 as my preferred terminal application. As for the shell, I decided to take a look at zsh, seeing that it&amp;#8217;s now the default shell with MacOS Catalina. I also wanted capabilities such as auto-completion, git integration - without a lot of effort ;-). After a bit of googling and reading, I picked prezto as my zsh configuration framework.\n\n\n\n\ninstalling the tools\n\n\nInstalling iterm2 is simple with homebrew:\n\n\n\nbrew cask install iterm2\n\n\n\nZsh that comes with MacOS Catalina is quite current (v5.7.1), so I&amp;#8217;ll just use the OS supplied version.\n\n\nNext, install prezto with the following commands:\n\n\n\ngit clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;${ZDOTDIR:-$HOME}/.zprezto&quot;\n\n\n\nAlternatively, you can install from my fork which contains my modified theme:\n\n\n\ngit clone --recursive https://github.com/naikoob/prezto.git &quot;${ZDOTDIR:-$HOME}/.zprezto&quot;\n\n\n\nfollowed by\n\n\n\nsetopt EXTENDED_GLOB\nfor rcfile in &quot;${ZDOTDIR:-$HOME}&quot;/.zprezto/runcoms/^README.md(.N); do\n  ln -s &quot;$rcfile&quot; &quot;${ZDOTDIR:-$HOME}/.${rcfile:t}&quot;\ndone\n\n\n\n\n\ntinkering\n\n\nFirst, edit the modules section of ~/.zpreztorc to enable the desired modules. I&amp;#8217;ve added a couple of modules as highlighted below:\n\n\n\n# Set the Prezto modules to load (browse modules).\n# The order matters.\nzstyle &#39;:prezto:load&#39; pmodule \\\n  &#39;environment&#39; \\\n  &#39;terminal&#39; \\\n  &#39;editor&#39; \\\n  &#39;history&#39; \\\n  &#39;directory&#39; \\\n  &#39;spectrum&#39; \\\n  &#39;utility&#39; \\\n  &#39;ssh&#39; \\ (1)\n  &#39;completion&#39; \\\n  &#39;git&#39; \\ (2)\n  &#39;syntax-highlighting&#39; \\ (3)\n  &#39;history-substring-search&#39; \\ (4)\n  &#39;prompt&#39;\n\n\n\n\n\n1\nuseful if you have passphrase protected your keys and/or often ssh over a bastion hosts\n\n\n2\nshows git information on your prompt\n\n\n3\neh&amp;#8230;&amp;#8203; syntax highlighting? Well, actually this also does syntax checking as you type\n\n\n4\nenable searching through command history using ctrl-r\n\n\n\n\n\n\nthemes\n\n\nTbh, this is a key motivation for me to explore prezto&amp;#8230;&amp;#8203; The fancy prompt don&amp;#8217;t make me a better developer, but it sure makes me look the part ;-)\n\n\nThis is how my prompt looks like:\n\n\n\n\n\n\n\nIt&amp;#8217;s based on the paradox theme that comes with the prezto distribution, and available on my fork here\n\n\nTo use this theme, copy it to ~/zprezto/modules/prompt/functions/prompt_doxxed_setup, and edit ~/.zpreztorc like so:\n\n\n\n# Set the prompt theme to load.\n# Setting it to &#39;random&#39; loads a random theme.\n# Auto set to &#39;off&#39; on dumb terminals.\nzstyle &#39;:prezto:module:prompt&#39; theme &#39;doxxed&#39;\n\n\n\n\n\nnerd fonts and glyphs\n\n\nNotice the branch and chevron symbols in the screenshot above? Those are not in the standard character set, we need a patched/nerd font so that they display properly. You can find patched fonts here or  here. I use the MesloLGS font from here. Just download and install the .ttf files.\n\n\nIf you&amp;#8217;re only using zsh from iTerm2 exclusively, you can skip the fonts and just enable built-in Powerline glyphs in iTerm2, like so:\n\n\n\n\n\n\n\nAnd while you&amp;#8217;re at it, you can change the colour presets as well. I&amp;#8217;m using &#39;Tango Dark&#39; for the screenshot above.\n\n\n\n\n\n\n\nI use iTerm2&amp;#8217;s built-in glyphs in iTerm2 as I feel they render better, and patched/nerd font in Visual Studio Code terminals. Overall, I&amp;#8217;m pretty satisfied with this setup. Hope you find it useful too.\n\n\n&amp;#160;\n\n\n"
} 
  
  
  
]
